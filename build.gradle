plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'org.jetbrains.kotlin.kapt' version '1.4.32'

    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'io.micronaut.application' version '1.5.0'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.4.32'

    id 'application'
    id 'java'
    id 'jacoco'
    id("com.github.nbaztec.coveralls-jacoco") version "1.2.12"
}

group = 'br.com.brandao'
version = '0.0.1'

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("br.com.brandao.*")
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-runtime'
    implementation 'io.micronaut.kotlin:micronaut-kotlin-runtime'
    implementation 'io.micronaut.configuration:micronaut-kafka:1.4.0'
    implementation 'javax.annotation:javax.annotation-api'
    implementation 'io.micronaut:micronaut-validation'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    runtimeOnly 'ch.qos.logback:logback-classic'
    runtimeOnly 'io.opentracing.contrib:opentracing-kafka-client:0.0.16'

    testImplementation 'org.testcontainers:kafka:1.12.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.12.2'

    testImplementation 'io.mockk:mockk:1.10.6'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "br.com.brandao.MainKt"
    }

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

apply plugin: "java"
ext {
    javaMainClass = "br.com.brandao.MainKt"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
}

application {
    mainClassName = javaMainClass
}